services:
  # Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    container_name: zookeeper
    restart: on-failure
    networks:
      - app-network
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    networks:
      - app-network
    command: [
      "bash",
      "-c",
      "bin/pulsar initialize-cluster-metadata \
      --cluster cluster-a \
      --zookeeper zookeeper:2181 \
      --configuration-store zookeeper:2181 \
      --web-service-url http://broker:8080 \
      --broker-service-url pulsar://broker:6650"
    ]
    depends_on:
      zookeeper:
        condition: service_healthy

  # Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    container_name: bookie
    restart: always  # Cambiado de on-failure a always para mayor estabilidad
    networks:
      - app-network
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
      - advertisedAddress=bookie
      # Parámetros de estabilidad para el bookie
      - journalDirectories=/pulsar/data/bookkeeper/journal
      - ledgerDirectories=/pulsar/data/bookkeeper/ledgers
      - bookiePort=3181
      - BOOKIE_MEM=-Xms512m -Xmx512m
      - BOOKIE_GC=-XX:+UseG1GC
      - dbStorage_writeCacheMaxSizeMb=256
      - dbStorage_readAheadCacheMaxSizeMb=64
      - journalMaxSizeMB=512
      - diskUsageThreshold=0.95
      - diskUsageWarnThreshold=0.90
      - autoRecoveryDaemonEnabled=true
      - journalSyncData=false  # Para mayor rendimiento en entornos de desarrollo
      - bookkeeperClientTimeoutInSeconds=60
      - bookkeeperClientHealthCheckEnabled=true
      - bookkeeperClientQuarantineTimeMillis=1800000
      - managedLedgerDefaultMarkDeleteRateLimit=0.1
      - managedLedgerMaxEntriesPerLedger=5000
      - managedLedgerMinLedgerRolloverTimeMinutes=10
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    healthcheck:
      test: ["CMD", "bin/bookkeeper", "shell", "simpletest"]
      interval: 30s
      timeout: 20s
      retries: 15
      start_period: 60s  # Dar más tiempo para inicializar
    command: >
      bash -c "mkdir -p /pulsar/data/bookkeeper/journal /pulsar/data/bookkeeper/ledgers && 
              bin/apply-config-from-env.py conf/bookkeeper.conf && 
              exec bin/pulsar bookie"

  # Start broker
  broker:
    image: apachepulsar/pulsar:latest
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - app-network
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - webServiceAdvertisedAddress=broker
      - advertisedListeners=external:pulsar://broker:6650
      - allowAutoTopicCreation=true
      - allowAutoTopicCreationType=partitioned
      - defaultNumPartitions=1
      - brokerDeleteInactiveTopicsEnabled=false
      - managedLedgerMaxEntriesPerLedger=50000
      - managedLedgerMinLedgerRolloverTimeMinutes=10
      - managedLedgerCursorMaxEntriesPerLedger=50000
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://broker:8080/admin/v2/clusters/cluster-a"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Simplifica el comando para evitar problemas de conexión interna
    command: >
      bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"           

  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=images_db
    ports:
      - "5450:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


  # HTTP API Service
  api-http:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: images-api-http
    command: bash -c "python -m app.main --mode http"
    networks:
      - app-network
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./storage:/app/storage
    environment:
      - STORAGE_TYPE=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=images_db
      - PULSAR_SERVICE_URL=pulsar://broker:6650
      - PULSAR_ENABLED=true
      - PULSAR_IMAGE_TOPIC=persistent://public/default/eventos-suscripcion
      - HTTP_PORT=8000
      - HTTP_HOST=0.0.0.0
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s
  
  # gRPC Service
  api-grpc:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: images-api-grpc
    command: bash -c "python -m app.main --mode grpc"
    networks:
      - app-network
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8001:8001"
    volumes:
      - ./:/app
      - ./storage:/app/storage
    environment:
      - STORAGE_TYPE=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=images_db
      - PULSAR_SERVICE_URL=pulsar://broker:6650
      - PULSAR_ENABLED=true
      - PULSAR_IMAGE_TOPIC=persistent://public/default/eventos-suscripcion
      - GRPC_PORT=8001
      - GRPC_HOST=127.0.0.1
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 10s
      retries: 2

  # Modificación para el servicio create-topic
  create-topic:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: create-settings-pulsar-topic
    # Ejecutar con || true para que siempre termine con éxito
    command: bash -c "sleep 15 && python -m app.images_collector.infrastructure.messaging.create_topic || true"
    networks:
      - app-network
    depends_on:
      broker:
        condition: service_healthy
      api-grpc:
        condition: service_started
      api-http:
        condition: service_started
    volumes:
      - ./:/app
    environment:
      - ADMIN_URL=http://broker:8080
      - PULSAR_SERVICE_URL=pulsar://broker:6650
      - PYTHONUNBUFFERED=1
    restart: "no"  # Cambiado de on-failure a no
    # Añade un healthcheck simple que siempre pase
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 5s
      timeout: 5s
      retries: 1

  consumer-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: consumer-demo-pulsar
    command: bash -c "sleep 45 && python -m app.images_collector.infrastructure.messaging.consumer-demo"
    networks:
      - app-network
    depends_on:
      broker:
        condition: service_healthy
      api-grpc:
        condition: service_healthy
      api-http:
        condition: service_healthy
      create-topic:
        condition: service_healthy     
    volumes:
      - ./:/app
    environment:
      - PULSAR_SERVICE_URL=pulsar://broker:6650
      - PYTHONUNBUFFERED=1
    restart: on-failure

  pulsar-express:
    image: bbonnin/pulsar-express
    container_name: pulsar-express
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      - SERVICE_URL=http://broker:8080
      - REFRESH_INTERVAL=5000  # Actualiza cada 5s para ver cambios más rápido
    depends_on:
      broker:
        condition: service_healthy
    restart: on-failure


networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
